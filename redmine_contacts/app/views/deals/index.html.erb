<% filtered_params = params.respond_to?(:to_unsafe_hash) ? params.to_unsafe_hash : params %>
<div class="contextual">
  <%= link_to sprite_icon('add', l(:label_crm_deal_new)), {:controller => 'deals', :action => 'new', :project_id => @project || Deal.allowed_target_projects.first }, :class => 'icon icon-add' if User.current.allowed_to?(:add_deals, @project, {:global => true}) && Deal.allowed_target_projects.any? %>
  <%= actions_dropdown do %>
      <% if Redmine::VERSION.to_s >= '4.1' && User.current.allowed_to?(:import_deals, @project, :global => true) %>
        <%= link_to sprite_icon('import', l(:button_import)), new_deals_import_path(:project_id => @project), :class => 'icon icon-import' %>
      <% end %>
  <% end %>  
</div>

<% html_title(@query.new_record? ? l(:label_deal_plural) : @query.name) %>

<%= form_tag({ :controller => 'deals', :action => 'index', :project_id => @project }, :method => :get, :id => 'query_form') do %>

    <script type="text/javascript">
       jQuery(function($) {
          // when the #search field changes
          $("#search").observe_field(2, function() {
            var form = $("#query_form"); // grab the form wrapping the search bar.
            var url = form.attr("action");
            form.find('[name="c[]"] option').each(function(i, elem){
              $(elem).attr('selected', true);
              $(elem).prop('selected', true)
            });

            var formData = form.serialize();
            form.find('[name="c[]"] option').each(function(i, elem){
              $(elem).attr('selected', false);
              $(elem).prop('selected', false)
            });

            $.get(url, formData, function(data) { // perform an AJAX get, the trailing function is what happens on successful get.
                $("#contact_list").html(data); // replace the "results" div with the result of action taken
            });
          });
        });
    </script>

    <h2 class="contacts_header">
        <span id='scope_header' class="scope_title">
        <%= @query.new_record? ? l(:label_deal_plural) : h(@query.name)  %>
        </span>

        <span class="live_search">
            <%= text_field_tag(:search, params[:search], :autocomplete => "off", :class => "live_search_field", :placeholder => l(:label_crm_contact_search) ) %>

        </span>

    </h2>
<%= hidden_field_tag 'set_filter', '1' %>
<%= hidden_field_tag 'object_type', 'deal' %>
<div id="query_form_with_buttons" class="hide-when-print">
  <div id="query_form_content">
  <fieldset id="filters" class="collapsible <%= @query.new_record? ? "" : "collapsed" %>">
    <legend onclick="toggleFieldset(this);" class="icon icon-<%= @query.new_record? ? 'expanded icon-expended' : "collapsed" %>">
      <%= sprite_icon(@query.new_record? ? "angle-down" : "angle-right") %>
      <%= l(:label_filter_plural) %>
    </legend>
    <div style="<%= @query.new_record? ? "" : "display: none;" %>">
      <%= render :partial => 'queries/filters', :locals => {:query => @query} %>
    </div>
  </fieldset>
  <fieldset id="options" class="collapsible collapsed">
    <legend onclick="toggleFieldset(this);" class="icon icon-collapsed">
      <%= sprite_icon("angle-right") %>
      <%= l(:label_options) %>
    </legend>
    <div class="hidden">
      <div id="list-definition">
        <div class="<%= 'hidden' if deals_list_style != 'list' %>">
          <div class="field"><%= l(:field_column_names) %></div>
          <%= render_query_columns_selection(@query) %>
        </div>
        <div>
        <% if ['list', 'list_excerpt'].include?(deals_list_style) %>
            <div class="field"><label for='group_by'><%= l(:field_group_by) %></label></div>
            <div><%= select_tag('group_by',
                               options_for_select(
                                 [[]] + @query.groupable_columns.collect {|c| [c.caption, c.name.to_s]},
                                 @query.group_by)
                       ) %></div>
        <% end %>
        <% if deals_list_style == 'list_excerpt' %>
            <div><label for='sort'><%= l(:label_sort) %></label></div>
            <div><%= select_tag('sort',
                               options_for_select(
                                 [[]] +
                                 [[l(:field_contact_status), "status:asc"],
                                  [l(:field_due_date), "due_date:asc"],
                                  [l(:field_created_on), "created_on:desc"],
                                  [l(:field_updated_on), "updated_on:desc"]],
                                 params[:sort] || @query.sort_criteria.try(:first).try(:join, ':'))
                       ) %></div>
        <% end %>

        </div>
        <%= call_hook(:view_deals_index_query_options, :deals => @deals, :query => @query) %>
        <div>
          <div class="field"><label for='deals_list_style'><%= l(:label_crm_list_partial_style) %></label></div>
          <div><%= select_tag('deals_list_style', options_for_select(deal_list_styles_for_select, deals_list_style)) %></div>
        </div>
      </div>
    </div>
  </fieldset>
</div>

<%= render :partial => "crm_calendars/buttons" if deals_list_style == 'crm_calendars/crm_calendar' %>

<p class="buttons hide-when-print">
  <%= link_to_function sprite_icon('checked', l(:button_apply)), 'submit_query_form("query_form")', :class => 'icon icon-checked' %>
  <%= link_to sprite_icon('reload', l(:button_clear)), { :set_filter => 1, :project_id => @project }, :class => 'icon icon-reload'  %>
  <% if @query.new_record? %>
    <% if User.current.allowed_to?(:save_contacts_queries, @project, :global => true) %>
      <%= link_to_function sprite_icon('save', l(:button_save)),
                           "$('#query_form').attr('action', '#{ @project ? new_project_crm_query_path(@project) : new_crm_query_path }'); submit_query_form('query_form')",
                           :class => 'icon icon-save' %>
    <% end %>
  <% else %>
    <% if @query.editable_by?(User.current) %>
      <%= link_to sprite_icon('edit', l(:button_contacts_edit_query)), edit_crm_query_path(@query, :object_type => "deal"), :class => 'icon icon-edit' %>
      <%= link_to sprite_icon('del', l(:button_contacts_delete_query)), crm_query_path(@query, :object_type => "deal"), :data => {:confirm => l(:text_are_you_sure)}, :method => :delete, :class => 'icon icon-del' %>
    <% end %>
  <% end %>
</p>
</div>
<% end %>

<%= error_messages_for 'query' %>
<% if @query.valid? %>
  <div id="contact_list" class="deal_list">
  <% if @deals.empty? %>
    <p class="nodata"><%= l(:label_no_data) %></p>
  <% else %>
    <%= render :partial => deals_list_style %>
  <% end %>
  </div>
  <% if User.current.allowed_to?(:export_contacts, @project, :global => true) %>
    <% other_formats_links do |f| %>
      <% if deals_list_style == 'list' %>
        <%= f.link_to 'CSV', :url => filtered_params, :onclick => "showModal('csv-export-options', '350px'); return false;" %>
      <% else %>
        <%= f.link_to 'CSV', :url => filtered_params %>
      <% end %>
    <% end %>
    <div id="csv-export-options" style="display:none;">
      <h3 class="title">
        <%= l(:label_export_options, :export_format => 'CSV') %>
      </h3>
      <%= form_tag({:controller => 'deals',
                    :action => 'index',
                    :project_id => @project,
                    :format => 'csv'},
                   :method => :get,
                   :id => 'csv-export-form', :encoding => 'utf-8') do %>
        <% columns_name = 'c[]' %>
        <%= query_as_hidden_field_tags(@query) %>
        <p>
          <label>
            <%= radio_button_tag columns_name, '', true %>
            <%= l(:description_selected_columns) %>
          </label>
          <br />
          <label>
            <%= radio_button_tag columns_name, 'all_inline' %>
            <%= l(:description_all_columns) %>
          </label>
        </p>
        <%= export_csv_encoding_select_tag %>
        <%= export_csv_separator_select_tag unless Redmine::VERSION.to_s < '5.1' %>           
        <p class="buttons">
          <%= submit_tag l(:button_export),
                         :name => nil,
                         :onclick => "hideModal(this);" %>
          <%= submit_tag l(:button_cancel),
                         :name => nil,
                         :onclick => "hideModal(this);",
                         :type => 'button' %>
        </p>
        <%= hidden_field_tag 'encoding', 'UTF-8' %>
      <% end %>
    </div>
  <% end %>
<% end %>

<%= context_menu %>

<% content_for :sidebar do %>
  <%= call_hook(:view_deals_sidebar_top, :deals => @deals) %>
  <%= render :partial => 'deals_statistics' %>
  <%= render_sidebar_crm_queries('deal') %>
  <%= call_hook(:view_deals_sidebar_after_statistics, :deals => @deals) %>
  <%= render :partial => 'notes/last_notes', :object => @last_notes %>
  <%= call_hook(:view_deals_sidebar_bottom, :deals => @deals) %>
<% end unless (deals_list_style == 'list_board') %>


<% content_for(:header_tags) do %>
  <%= javascript_include_tag :contacts, :plugin => 'redmine_contacts'  %>
  <meta name = "format-detection" content = "telephone=no">
<% end %>

